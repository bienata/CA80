0000-                  4               .sf example_CLR.sym
0000-                  5               .in ca80.inc
0000-            I     1                               ; ciagle uzupelniam ...
00E0-            I     2       USER8255        .eq             $E0
0000-            I     3       PA                      .eq             0
0001-            I     4       PB                      .eq             1
0002-            I     5       PC                      .eq             2
0003-            I     6       CTRL            .eq             3
0000-            I     7                               ;
FFF7-            I     8       CYF0        .eq $FFF7
FFF8-            I     9       CYF1        .eq $FFF8
FFF9-            I    10       CYF2        .eq $FFF9
FFFA-            I    11       CYF3        .eq $FFFA
FFFB-            I    12       CYF4        .eq $FFFB
FFFC-            I    13       CYF5        .eq $FFFC
FFFD-            I    14       CYF6        .eq $FFFD
FFFE-            I    15       CYF7        .eq $FFFE
0000-            I    16
0010-            I    17       CLR                 .eq $0010   ; CLR - kasowanie wyswietlacza
0018-            I    18       LBYTE       .eq $0018   ; LBYTE - wyswietlenie Aku w HEX
0020-            I    19       LADR        .eq $0020   ; LADR - wyswietlenie HL w HEX
022D-            I    20       CZAS        .eq $022D   ; CZAS - pokazuje czas/date
01AB-            I    21       COM                 .eq $01AB   ; COM - pokazuje znak 7-seg z rejestru C
01D4-            I    22       PRINT       .eq $01D4   ; PRINT - drukuje komunikat z (HL)
0213-            I    23       EXPR        .eq $0213   ; EXPR - pobranie ciagu liczb 16bit na stos
FFC3-            I    24       CSTS        .eq $FFC3   ; CSTS - test czy klawisz nacisniety
FFC6-            I    25       CI          .eq $FFC6   ; CI - pobranie znaku z klawiatury
01E0-            I    26       CO          .eq $01E0   ; CO - wyswietlenie cyfry hex
0000-            I    27                   ;
00FF-            I    28       EOM         .eq $FF
0000-            I    29
0000-            I    30
0000-                  6               .sm code                    ;
C000-                  7               .or $c000                   ; U12/C000
C000-31 66 FF          8 ( 10)                 ld  SP,$ff66                ;
C003-                  9                       ;
C003-                 10       .begin
C003-21 2C C0         11 ( 10)         ld HL, message1             ; testowa treść
C006-CD D4 01         12 ( 17)                 call PRINT                  ; pokaż
C009-80               13                       .db $80                     ; na cały wyświetlacz
C00A-CD 35 C0         14 ( 17)                 call delay
C00D-                 15
C00D-CD 10 00         16 ( 17)                 call CLR                    ; 7 6 5 4 3 2 1 0
C010-22               17                       .db  $22                    ; _._._._.#.#._._.
C011-CD 35 C0         18 ( 17)         call delay
C014-                 19
C014-CD 10 00         20 ( 17)         call CLR
C017-24               21               .db  $24                    ; _._.#.#._._._._.
C018-CD 35 C0         22 ( 17)         call delay
C01B-                 23
C01B-CD 10 00         24 ( 17)         call CLR
C01E-20               25               .db  $20                    ; _._._._._._.#.#.
C01F-CD 35 C0         26 ( 17)         call delay
C022-                 27
C022-CD 10 00         28 ( 17)         call CLR
C025-26               29               .db  $26                    ; #.#._._._._._._
C026-CD 35 C0         30 ( 17)         call delay
C029-                 31
C029-C3 03 C0         32 ( 10)         jp .begin
C02C-                 33                       ;
C02C-                 34       message1:
C02C-5C 5C 5C 5C 
     63 63 63 63 
     FF               35               .db     $5c,$5c,$5c, $5c, $63, $63, $63, $63, EOM
C035-                 36               ;
C035-C5               37 ( 11) delay:  push    BC
C036-F5               38 ( 11)         push    AF
C037-06 FF            39 (  7)         ld      B,$FF
C039-                 40       .delay
C039-76               41 (  4)         halt            ; 2ms
C03A-10 FD            42 ( 8+)         djnz    .delay  ; while( --B )
C03C-F1               43 ( 10)         pop     AF
C03D-C1               44 ( 10)         pop     BC
C03E-C9               45 ( 10)         ret
C03F-                 46
C03F-                 47                       ;
C03F-                 48
