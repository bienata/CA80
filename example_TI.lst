0000-                  4               .sf example_TI.sym
0000-                  5               .in ca80.inc
0000-            I     1                               ; ciagle uzupelniam ...
00E0-            I     2       USER8255        .eq             $E0
0000-            I     3       PA                      .eq             0
0001-            I     4       PB                      .eq             1
0002-            I     5       PC                      .eq             2
0003-            I     6       CTRL            .eq             3
0000-            I     7                               ;
FFF7-            I     8       CYF0        .eq $FFF7
FFF8-            I     9       CYF1        .eq $FFF8
FFF9-            I    10       CYF2        .eq $FFF9
FFFA-            I    11       CYF3        .eq $FFFA
FFFB-            I    12       CYF4        .eq $FFFB
FFFC-            I    13       CYF5        .eq $FFFC
FFFD-            I    14       CYF6        .eq $FFFD
FFFE-            I    15       CYF7        .eq $FFFE
0000-            I    16
0010-            I    17       CLR                 .eq $0010   ; CLR - kasowanie wyswietlacza
0018-            I    18       LBYTE       .eq $0018   ; LBYTE - wyswietlenie Aku w HEX
0020-            I    19       LADR        .eq $0020   ; LADR - wyswietlenie HL w HEX
022D-            I    20       CZAS        .eq $022D   ; CZAS - pokazuje czas/date
01AB-            I    21       COM                 .eq $01AB   ; COM - pokazuje znak 7-seg z rejestru C
01D4-            I    22       PRINT       .eq $01D4   ; PRINT - drukuje komunikat z (HL)
0213-            I    23       EXPR        .eq $0213   ; EXPR - pobranie ciagu liczb 16bit na stos
FFC3-            I    24       CSTS        .eq $FFC3   ; CSTS - test czy klawisz nacisniety
FFC6-            I    25       CI          .eq $FFC6   ; CI - pobranie znaku z klawiatury
01E0-            I    26       CO          .eq $01E0   ; CO - wyswietlenie cyfry hex
0007-            I    27       TI          .eq $0007   ; TI - pobranie znaku z echem
01F4-            I    28       PARAM       .eq $01F4   ; PARAM - pobranie liczby 16-bit do HL z echem
023B-            I    29       HILO        .eq $023b   ; HILO - iterator, HL++, CY = !(DE >= HL)
0000-            I    30                   ;
00FF-            I    31       EOM         .eq $FF
0000-            I    32
0000-            I    33
0000-                  6               .sm code                    ;
C000-                  7               .or $c000                   ; U12/C000
C000-                  8               ;
0080-                  9       CODE_DOT    .eq     $80             ; .
0048-                 10       CODE_EQU    .eq     $48             ; =
C000-31 66 FF         11 ( 10)                 ld  SP,$ff66                ;
C003-                 12       .begin
C003-CD 07 00         13 ( 17)         call TI                     ; pobierz znaczek z kbd
C006-10               14               .db $10                     ; echo na prawej pozycji
C007-28 02            15 ( 7+)         jr Z,.dotOrEqual             ; [.] lub [=]
C009-18 F8            16 ( 12)         jr .begin
C00B-                 17               ; obsluga .=
C00B-                 18       .dotOrEqual:
C00B-0E 48            19 (  7)         ld  C,CODE_EQU       ; może ustaw =
C00D-38 02            20 ( 7+)         jr  C,.dotOrEqualNext
C00F-0E 80            21 (  7)         ld  C,CODE_DOT       ; a jednak ustaw .
C011-                 22       .dotOrEqualNext
C011-CD 10 00         23 ( 17)         call CLR
C014-10               24               .db $10
C015-CD AB 01         25 ( 17)         call COM             ; pokaż kod 7-seg
C018-10               26               .db $10
C019-CD 1E C0         27 ( 17)         call delay
C01C-18 E5            28 ( 12)         jr  .begin           ; i nazat
C01E-                 29               ;
C01E-                 30               ;
C01E-C5               31 ( 11) delay:  push    BC
C01F-F5               32 ( 11)         push    AF
C020-06 FF            33 (  7)         ld      B,$FF
C022-                 34       .delay
C022-76               35 (  4)         halt            ; 2ms
C023-10 FD            36 ( 8+)         djnz    .delay  ; while( --B )
C025-F1               37 ( 10)         pop     AF
C026-C1               38 ( 10)         pop     BC
C027-C9               39 ( 10)         ret
C028-                 40
C028-                 41                       ;
C028-                 42
